> 서울시 구청 위치 정보 표시하기  <
--------------------------------------
loc <- read.csv("서울시구청위치정보.csv",header=T)
str(loc)
loc
kor <- get_map("seoul", zoom=11, maptype = "roadmap")
kor.map <- ggmap(kor)+geom_point(data=loc, aes(x=LON, y=LAT),size=3,alpha=1); kor.map
kor.map + geom_text(data=loc, aes(x = LON, y = LAT+0.01, label=구청명),size=3)
kor.map + geom_text(data=loc, aes(x = LON, y = LAT+0.01, label=구청명),size=3)
loc
kor.map + geom_text(data=loc, aes(x = LON, y = LAT+0.01, label=자치구명),size=3)
kor.map + geom_text(data=loc, aes(x = LON, y = LAT+0.01, label=도서관),size=3)
kor.map + geom_text(data=loc, aes(x = LON, y = LAT+0.01, label=도서관),size=3)
kor.map + geom_text(data=loc, aes(x = LON, y = LAT+0.01, label=도서관명),size=3)
------------------------------------------
> 서울지하철 2호선 위치 지도에 표시하기  <
------------------------------------------
library(ggplot2)
library(ggmap)
------------------------------------------
> 서울지하철 2호선 위치 지도에 표시하기  <
------------------------------------------
library(ggplot2)
------------------------------------------
> 서울지하철 2호선 위치 지도에 표시하기  <
------------------------------------------
library(ggplot2)
------------------------------------------
> 서울지하철 2호선 위치 지도에 표시하기  <
------------------------------------------
library(ggplot2)
library(ggplot2)
loc <- read.csv("서울지하철2호선위경도정보.csv",header=T)
loc
kor <- get_map("Yongsan", zoom=11, maptype = "roadmap")
kor.map <- ggmap(kor)+geom_point(data=loc,size=power, aes(x=LON, y=LAT),size=5,alpha=0.7); kor.map
kor <- get_map("Yongsan", zoom=11, maptype = "roadmap")
kor.map <- ggmap(kor)+geom_point(data=loc,size=power, aes(x=LON, y=LAT),size=5,alpha=0.7); kor.map
kor.map <- ggmap(kor)+geom_point(data=loc,size=power, aes(x=LON, y=LAT),size=5,alpha=0.7); kor.map
kor <- get_map("Yongsan", zoom=11, maptype = "roadmap")
kor
kor.map <- ggmap(kor)+geom_point(data=loc,size=power, aes(x=LON, y=LAT),size=10,alpha=0.7); kor.map
kor.map <- ggmap(kor)+geom_point(data=loc,size=power, aes(x=LON, y=LAT),size=5,alpha=0.7); kor.map
kor.map + geom_text(data=loc, aes(x = LON, y = LAT+0.005, label=역명),size=3)
loc
kor.map <- ggmap(kor)+geom_point(data=loc,size=power, aes(x=LON, y=LAT),alpha=0.7); kor.map
,size=5
kor.map <- ggmap(kor)+geom_point(data=loc,size=power, aes(x=LON, y=LAT),size=5,alpha=0.7); kor.map
kor.map <- ggmap(kor)+geom_point(data=loc,size=power, aes(x=LON, y=LAT),alpha=0.7); kor.map
kor.map <- ggmap(kor)+geom_point(data=loc, aes(x=LON, y=LAT),size=5,alpha=0.7); kor.map
kor.map + geom_text(data=loc, aes(x = LON, y = LAT+0.005, label=역명),size=3)
kor.map <- ggmap(kor)+geom_point(data=loc,size=power, aes(x=LON, y=LAT),alpha=0.7); kor.map
kor.map + geom_text(data=loc, aes(x = LON, y = LAT+0.005, label=역명),size=3)
kor <- get_map("Yongsan", zoom=11, maptype = "roadmap")
loc
kor.map <- ggmap(kor)+geom_point(data=loc, aes(x=LON, y=LAT),size=2,alpha=0.7); kor.map
kor.map + geom_text(data=loc, aes(x = LON, y = LAT+0.005, label=역명),size=3)
loc <- read.csv("서울시장난감도서관위치현황.csv",header=T)
doll <- get_map("seoul", zoom=11, maptype = "roadmap")
loc <- read.csv("제주도여행코스_1일차.csv",header=T)
loc <- read.csv("서울시장난감도서관위치현황.csv",header=T)
doll <- get_map("seoul", zoom=11, maptype = "roadmap")
doll.map <- ggmap(doll)+geom_point(data=loc, aes(x=LON, y=LAT),size=3,alpha=1); doll.map
doll.map + geom_text(data=loc, aes(x = LON, y = LAT+0.005, label=이름),size=2)
loc <- read.csv("제주도여행코스_1일차.csv",header=T)
loc
kor <- get_map("Hallasan", zoom=7, maptype = "satellite")
kor.map <- ggmap(kor)+geom_point(data=loc, aes(x=LON, y=LAT),size=3,alpha=0.7,col="red"); kor.map
kor.map <- kor.map + geom_path(data=loc,aes(x=LON,y=LAT),size=1,linetype=2,col="green"); kor.map
kor.map <- kor.map + geom_text(data=loc, aes(x = LON, y = LAT+0.005, label=장소, col="red"),size=4); kor.map
kor <- get_map("Hallasan", zoom=10, maptype = "satellite")
kor.map <- ggmap(kor)+geom_point(data=loc, aes(x=LON, y=LAT),size=3,alpha=0.7,col="red"); kor.map
kor.map <- kor.map + geom_path(data=loc,aes(x=LON,y=LAT),size=1,linetype=2,col="green"); kor.map
kor.map <- kor.map + geom_text(data=loc, aes(x = LON, y = LAT+0.005, label=장소, col="red"),size=4); kor.map
kor <- get_map("Hallasan", zoom=15, maptype = "satellite")
kor.map <- ggmap(kor)+geom_point(data=loc, aes(x=LON, y=LAT),size=3,alpha=0.7,col="red"); kor.map
kor <- get_map("Hallasan", zoom=11, maptype = "satellite")
kor.map <- ggmap(kor)+geom_point(data=loc, aes(x=LON, y=LAT),size=3,alpha=0.7,col="red"); kor.map
kor <- get_map("Hallasan", zoom=9, maptype = "satellite")
kor.map <- ggmap(kor)+geom_point(data=loc, aes(x=LON, y=LAT),size=3,alpha=0.7,col="red"); kor.map
kor.map <- kor.map + geom_path(data=loc,aes(x=LON,y=LAT),size=1,linetype=2,col="green"); kor.map
kor <- get_map("Hallasan", zoom=10, maptype = "satellite")
kor.map <- ggmap(kor)+geom_point(data=loc, aes(x=LON, y=LAT),size=3,alpha=0.7,col="red"); kor.map
kor.map <- kor.map + geom_path(data=loc,aes(x=LON,y=LAT),size=1,linetype=2,col="green"); kor.map
kor.map <- kor.map + geom_text(data=loc, aes(x = LON, y = LAT+0.005, label=장소, col="red"),size=4); kor.map
---------------------------------
> google Motion Chart 사용하기  <
---------------------------------
install.packages("googleVis")
library(googleVis)
install.packages("googleVis")
library(googleVis)
Fruits
str(Fruits)
t1 <- gvisMotionChart(Fruits, idvar="Fruit", timevar="Year")
plot(t1)
line_2 <- read.csv("2호선_강남역_시간대별_승하차현황_세로.csv",header=T,sep=",")
t1 <- gvisMotionChart(line_2, idvar="line_no", timevar="time", options=list(width=1000,height=500))
plot(t1)
line_2
K<-c(2.3,1.7,1.4,0.7,1.9)
k
k
a<-c(2.3,1.7,1.4,0.7,1.9)
a
summary(a)
var(a)
sd(a)
b<-c(19,20,21)
b<-c(1,3,1)
b
b<-c(19,20,21,1,3,1)
b
b<-c(1,3,1)
b<-c(19,20,21)
a<-c(1,3,1)
b*a
b*a/3
sum(b*a)/3
b*a
mean(sum(b*a))
sum(b*a)/3
sum(b*a)/5
sum(c)/5
sum(a*b)/5
sum(a*b)/sum(a)
mean(sum(a*b))
sum(a*b)
a<-c(19,20,21,145,147)
f<-c(3,6,3,1,1)
a*f
sum(a*f)
sum(a*f)/sum(f)
k<-c(1:8)
b<-c(4,6,4,4,3,2,1,1)
g<-c(4,6,4,4,3,2,1,1)
a=data.frame(k,g)
a
values<-c(1:8)
f<-c(4,6,4,4,3,2,1,1)
values<-c(1:8)
f<-c(4,6,4,4,3,2,1,1)
a=data.frame(values,f)
a
median(a)
median(a,)
sapply(X = a,median)
?apply
?apply
sapply(a)
sapply(a)
sapply(a,mean)
sapply(a,mean)
apply(a,mean)
apply(a,mean)
apply(a,c(1,2),median)
apply(a,c(1),median)
apply(a,1,median)
a=data.frame(values,f)
rep(values,f)
median(a)
a<-rep(values,f)
median(a)
age(1,2,3,31,32,33)
age<-c(1,2,3,31,32,33)
age
sqt(16)
sqrt(16)
a<-c(1:7)
(a-mean(a))^2/length(a)
length(a)
sum((a-mean(a))^2)/length(a)
sqrt(b)
b<-(sum((a-mean(a))^2)/length(a))
sqrt(b)
var(a)
b<-(sum((a-mean(a))^2)/length(a))
b
?var
mean(a)
length(a)
1.44/sqrt(30)
install.packages("xlsx")
library(xlsx)
emp<-read.table("emp.xls")
emp
?read.table
emp<-read.table("emp.xls", header = FALSE)
install.packages('readxl')
library(readxl)
emp<-read_xls("emp.xls")
emp
hist(emp$SAL)
employees<-read_xls("employees.xls")
hist(employees$SALARY)
confidence_interval_90(xbar,n,sigma)
?confidence
??confidence
??confidence_interval_90
install.package("plotly")
install.packages("plotly")
?boxplot
library(plotly)
emp<-read.table("emp.xls", header = TRUE)
emp<-read_xls("emp.xls")
plot_ly(data =emp$SAL,type="box" )
emp
str(emp)
emp<-as.data.frame(emp)
str(emp)
plot_ly(data =emp$SAL,type="box" )
plot_ly(data =emp,type="box" )
plot_ly(data =emp,y=emp$sal,type="box"   )
plot_ly(data =emp,y=emp$sal,type="box")
emp$sal
plot_ly(data =emp,y=emp$SAL,type="box")
plot_ly(data =emp,y=emp$SAL,type="box",split = emp$JOB)
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB )
plot_ly(data =emp,y=emp$SAL,type="box",colors =emp$JOB )
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB )
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 1)
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 0)
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 0.5)
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 0)
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 1)
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 1,symbol="a")
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 1,symbol="1")
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 1,symbol=name)
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 1,symbol=emp$JOB)
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 1,symbol=symbol)
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 1,height = "100")
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 1,height = "500")
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 1,height = "300")
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 1,height = "300")
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 1,height = "250")
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 1,frame = emp)
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 1,frame)
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 1,frame=)
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 1,frame=emp$sal)
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 1,frame=emp)
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 1,frame=emp$SAL)
plot_ly(data =emp,y=emp$SAL,type="box",color =emp$JOB,alpha = 1)
?plot_ly
install.packages("combinat")
library(combinat)
combn()
?combn()
?combn()
??combn()
?combn()
?combn(1:6,2)
combn(1:6,2)
combn(1:6,2,sum)
combn(1:6,2,sum=6)
combn(1:6,2,sum==6)
combn(1:6,2,sum=6)
combn(1:6,2,sum)
combn(1:6,2,fun = sum)
combn(1:6,2,fun = sum,fun)
combn(1:6,2,fun = sum,fun=)
combn(1:6,2,fun = sum,fun)
combn(1:6,2,fun = sum)
p = 1/6
x = 1
b = p**x * (1-p)**(1-x)
r = b * b * 5
r
1-sum(dbinom(x,size=20,p=0.2))
1-pbinom(1,size=20,p=0.2)
x<-c(0,1)
1-sum(dbinom(x,size=20,p=0.2))
1-sum(dbinom(x,size-19,p=0.15))
1-sum(dbinom(x,size-19,p=0.15))
1-sum(dbinom(x,size=19,p=0.15))
dpois(3,10/2)
dpois(3,10/2)
pbinom(1,size=20,p=0.2)
dpois(0,0.9323)
dpois(0,0.9323)*576
dpois(1,0.9323)*576
0.999**500
0.9999**500
0.99**500
0.99**500
0.999**500
(0.999**500)
(0.9999**500)
(0.99**500)
(0.9**500)
pnorm(185,mean = 173,sd = 5,lower.tail = F)
pnorm((185-173)/5,mean = 0,sd = 1,lower.tail = F)
zsc<-function(x,u,st){
z=(x-u)/st
return z
}
zsc<-function(x,u,st){
z=(x-u)/st
return (z)
}
zsc(10,15,2)
zsc(750,800,40)
pnorm(zsc(750,800,40),mean=0,sd=1)
pnorm(zsc(750,800,40),mean=0,sd=1,lower.tail = T)
1-0.8944
e**(1/5*6)
qnorm(0.95)
qnorm(0.95)*16
a <- 5   # sample mean
s <- 2   # standard deviation
n <- 20  # sample size
error <- qnorm(0.975)*s/sqrt(n); error
a <- 5   # sample mean
s <- 2   # standard deviation
n <- 20  # sample size
error <- qnorm(0.975)*s/sqrt(n);
qnorm(0.975)*s/sqrt(n);
error <- qnorm(0.95)*sigma/sqrt(n);
m     <- 800  # sample mean
sigma <- 40   # population standard deviation
n     <- 100  # sample size
error <- qnorm(0.95)*sigma/sqrt(n);
error
error
error <- qnorm(0.95)*sigma/sqrt(n);
error
\error <- 1.64*sigma/sqrt(n);
error <- 1.64*sigma/sqrt(n);
error
left <- m - error; left
right <- m + error; right
sam<-c(15.50, 11.21, 12.67, 8.87, 12.15, 9.88, 2.06, 14.50, 0, 4.97)
avg(sam)
avg<-avg(sam)
qwe
qwe
123
12
3:
/
average<-avg(sam)
average(sam)
mean(sam)
s<-mean(sam)
sd(sam)
m<-mean(sam)
s<-sd(sam)
static<-(m-8.1)/(s/sqrt(10))
statistic<-(m-8.1)/(s/sqrt(10))
statistic
print(statistic)
m<-mean(sam)
s<-sd(sam)
#H0:m=8.1
#H1:m!=8.1
statistic<-(m-8.1)/(s/sqrt(10))
print(statistic)
qt(0.95,df=9)
a<-qt(0.95,df=9)
a
a<statistic
a<=statistic
(a<=statistic)
1>2
1>=2
[1>=2]
(a<=statistic)
statistic<-(m-8.1)/(s/sqrt(10))
m
m
m<-mean(sam)
m
a<-qt(0.975,df=9)
(a<=statistic)
(a<=statistic)
setwd("C:\\Users\\student\\Desktop")
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
useSejongDic()
txt <- readLines("a.txt")
txt
data2<-sapply(txt,extractNoun,USE.NAMES = F)
data2
data3<-unlist(data2)
data3
data3<-Filter(function(x){nchar(x)>=2},data3)
data3<-gsub("\\d+","",data3)
data3<-gsub("[A-Za-z]","",data3)
data3<-gsub("_callback", "", data3)
data3<-gsub("\\(", "[", data3)
data3<-gsub("\\)", "]", data3)
data3<-gsub(";", "", data3)
data3<-gsub("\n", "", data3)
data3<-gsub("[[:cntrl:]]","",data3)
write(unlist(data3),"cloudcomputing2.txt")
data4<-read.table("cloudcomputing2.txt")
wordcount<-table(data4)
wordcount
png("c.png")
palete<-(brewer.pal(4,"Set2"))
wordcloud(names(wordcount),freq=wordcount,rot.per=0.25,min.freq = 3,
random.order=F,random.color=T,colors=palete)
dev.off()
txt <- readLines("a.txt")
txt
data2<-sapply(txt,extractNoun,USE.NAMES = F)
useSejongDic()
library(KoNLP)
library(wordcloud)
library(wordcloud)
library(RColorBrewer)
library(wordcloud)
install.packages(wordcloud)
install.packages("wordcloud")
install.packages("KoNLP")
wordcloud2(wordcount,size = 0.7,color='random-dark' , backgroundColor="white",minSize=5,gridSize=8)
install.packages("tm")
library(tm)
library(KoNLP)
library(RColorBrewer)
useSejongDic()
txt <- readLines("b.txt",encoding = "UTF-8")
txt
data2<-sapply(txt,extractNoun,USE.NAMES = F)
data2
data3<-unlist(data2)
data3
data3<-Filter(function(x){nchar(x)>=2},data3)
data3<-gsub("\\d+","",data3)
data3<-gsub("[A-Za-z]","",data3)
data3<-gsub("_callback", "", data3)
data3<-gsub("\\(", "[", data3)
data3<-gsub("\\)", "]", data3)
data3<-gsub(";", "", data3)
data3<-gsub("\n", "", data3)
data3<-gsub("'",'"',data3)
data3 <-gsub("[[:punct:]]+", "", data3)
data3<-removePunctuation(data3,preserve_intra_word_dashes = TRUE)
data3<-gsub("[[:cntrl:]]","",data3)
data3<-Filter(function(x){nchar(x)>=2},data3)
write(unlist(data3),"cloudcomputing2.txt")
data4<-read.table("cloudcomputing2.txt",quote="")
?read.table()
wordcount<-table(data4)
wordcount
wordcloud(wordcount,size = 0.7,color='random-dark' , backgroundColor="white",minSize=5,gridSize=8)
useSejongDic()
txt <- readLines("b.txt",encoding = "UTF-8")
txt
data2<-sapply(txt,extractNoun,USE.NAMES = F)
data2
data3<-unlist(data2)
data3
data3<-Filter(function(x){nchar(x)>=2},data3)
data3<-gsub("\\d+","",data3)
data3<-gsub("[A-Za-z]","",data3)
data3<-gsub("_callback", "", data3)
data3<-gsub("\\(", "[", data3)
data3<-gsub("\\)", "]", data3)
data3<-gsub(";", "", data3)
data3<-gsub("\n", "", data3)
data3<-gsub("'",'"',data3)
data3 <-gsub("[[:punct:]]+", "", data3)
data3<-gsub("[[:cntrl:]]","",data3)
data3<-Filter(function(x){nchar(x)>=2},data3)
write(unlist(data3),"cloudcomputing2.txt")
data4<-read.table("cloudcomputing2.txt",quote="")
wordcount<-table(data4)
wordcount
wordcloud(wordcount,size = 0.7,color='random-dark' , backgroundColor="white",minSize=5,gridSize=8)
wordcloud(wordcount)
library(wordcloud)
wordcloud(wordcount)
library(tm)
install.packages("tm")
library(tm)
wordcloud(wordcount)
wordcount
wordcloud(wordcount)
install.packages("wordcloud")
install.packages("KoNLP")
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
useSejongDic()
txt <- readLines("jeju.txt")
txt
data2<-sapply(txt,extractNoun,USE.NAMES = F)
data2
data3<-unlist(data2)
data3
data3<-Filter(function(x){nchar(x)>=2},data3)
data3<-gsub("\\d+","",data3)
data3<-gsub("[A-Za-z]","",data3)
data3<-gsub("_callback", "", data3)
data3<-gsub("\\(", "[", data3)
data3<-gsub("\\)", "]", data3)
data3<-gsub(";", "", data3)
data3<-gsub("\n", "", data3)
data3<-gsub("[[:cntrl:]]","",data3)
write(unlist(data3),"cloudcomputing2.txt")
data4<-read.table("cloudcomputing2.txt")
wordcount<-table(data4)
wordcount
png("c.png")
palete<-(brewer.pal(4,"Set2"))
wordcloud(names(wordcount),freq=wordcount,rot.per=0.25,min.freq = 3,
random.order=F,random.color=T,colors=palete)
dev.off()
install.packages("wordcloud")
install.packages("KoNLP")
install.packages("KoNLP")
