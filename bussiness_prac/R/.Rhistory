#step 변수 선택 입력
#glm,family=binomial-> 로지스틱 입력
fp.dau1.cast$prob<-round(fitted(fit.logit),2)
fitted(fit.logit)
fit.logit
fp.dau1.cast$pred<-ifelse(fp.dau1.cast$prob>0.5,1,0)
head(fp.dau1.cast)
?fitted
table(fp.dau1.cast[,c("is_sp","pred")])
fp.dau1.cast<-fp.dau1.cast[fp.dau1.cast$is_sp==1&fp.dau1.cast$pred==1,]
head(fp.dau1.cast[order(fp.dau1.cast$prob,decreasing = T),])
#피처폰을 쓰고 1월 사용 내역이 있는 유저를 뽑고 is_access변수에 1을 넣음
fp.dau1.cast<-dcast(fp.dau1,user_id~region_day,value.var = "is_access",function(x) as.character(length(x)))
names(fp.dau1.cast)[-1]<-paste0("X",1:31,"day")
#1빼고 다 보여주기
fp.dau1.cast<-merge(fp.dau1.cast,fp.mau1[,c("user_id","is_sp")],by="user_id")
fit.logit<-step(glm(is_sp~.,data=fp.dau1.cast[,-1],
family = binomial))
#step 변수 선택 입력
#glm,family=binomial-> 로지스틱 입력
fp.dau1.cast$prob<-round(fitted(fit.logit),2)
fp.dau1.cast$pred<-ifelse(fp.dau1.cast$prob>0.5,1,0)
fp.dau1.cast1<-fp.dau1.cast[fp.dau1.cast$is_sp==1&fp.dau1.cast$pred==1,]
head(fp.dau1.cast1[order(fp.dau1.cast1$prob,decreasing = T),])
fp.dau1.cast2<-fp.dau1.cast[fp.dau1.cast$is_sp==0&fp.dau1.cast$pred==1,]
head(fp.dau1.cast2[order(fp.dau1.cast2$prob,decreasing = T),])
fp.dau1.cast3<-fp.dau1.cast[fp.dau1.cast$is_sp==0&fp.dua1.cast$pred==0,]
fp.dau1.cast3<-fp.dau1.cast[fp.dau1.cast$is_sp==0&fp.dau1.cast$pred==0,]
head(fp.dau1.cast3[order(fp.dau1.cast3$prob),])
fp.dau1.cast3[order(fp.dau1.cast3$prob)
fp.dau1.cast3[order(fp.dau1.cast3$prob),]
fp.dau1.cast3[order(fp.dau1.cast3$prob),]
#chapter08 클러스터링
#유저 세그멘테이션 분석
getwd()
setwd("R-/bussiness_prac/R/")
act<-read.csv("sample-data/section8/daily/action/game-01/2013-10-31/data.tsv")
act<-read.csv("sample-data/section8/daily/action/game-01/2013-10-31/data.tsv",header = T,stringsAsFactors = F)
head(act)
act<-read.csv("sample-data/section8/daily/action/game-01/2013-10-31/data.tsv",header = T,stringsAsFactors = F,sep="\t")
head(act)
#foreach사용
install.packages("foreach")
library(foreach)
#seq.Date
?seq.Date
?sprintf
#chapter08 클러스터링
#유저 세그멘테이션 분석려
s<-getwd()
s
sprintf("%a")
sprintf("%s",a)
a="C:/Users/DS/Documents/R-/bussiness_prac/R"
sprintf("%s",a)
sprintf("%s/",a)
install.packages("parallel")
library(parallel)
detectCores()
readtsvdates<-function(base.dir,app.name,date.from,date.to){
date.from<-as.Date(date.from)
date.to<-as.Date(data.to)
dates<-seq.Date(date.from,date.to,by="day")
x<-ldply(foreach(day=dates,combine=rbind) %do%{
#%do%
# foreach: Specify the variables to iterate over
# %do%: Execute the R expression sequentially
# do는 순차적으로 실행
# dopar은 병렬적으로 실행
# %dopar%: Execute the R expression using the currently registered backend
#seq.Date
#?seq.Date
#Generate Regular Sequences of Date
#시작날짜와 종료날짜를 통해 date List 생성
read.csv(sprintf("%s/%s/%s/data.tsv",base.dir,app.name,day),
#sprintf
#?sprintf
#String Formatting Commands
#주어진 인자를 규칙에 맞게 문자열로 변환해 출력
#a="C:/Users/DS/Documents/R-/bussiness_prac/R"
#sprintf("%s/",a)
#"C:/Users/DS/Documents/R-/bussiness_prac/R/"
header = T,
sep="\t",
stringsAsFactors = F)
})
x
}
readdau<-function(app.name,data.from,date.to=date.from){
data<-readtsvdates("sample-data/section8/daily/dau/",app.name,date.from,date.to)
data
}
head(readdau())
readdau<-function(app.name,data.from,date.to=date.from){
data<-readtsvdates("sample-data/section8/daily/dau/",app.name,date.from,date.to)
data
}
data<-readtsvdates("sample-data/section8/daily/dpu/",app.name,date.from,date.to)
readdpu<-function(app.name,date.from,date.to=date=date.from){
data<-readtsvdates("sample-data/section8/daily/dpu/",app.name,date.from,date.to)
data
}
readdpu<-function(app.name,date.from,date.to=date=date.from){
data<-readtsvdates("sample-data/section8/daily/dpu/",app.name,date.from,date.to)
data
}
readdpu<-function(app.name,date.from,date.to=date.from){
data<-readtsvdates("sample-data/section8/daily/dpu/",app.name,date.from,date.to)
data
}
readactiondaily<-function(app.name,date.from,date.to = date.from){
data <-readtsvdates("sample-data/section8/daily/action/",app.name ,date.from,date.to)
data
}
dau<-readdau("game-01","2013-05-01","2013-10-31")
readtsvdates<-function(base.dir,app.name,date.from,date.to){
date.from<-as.Date(date.from)
date.to<-as.Date(date.to)
dates<-seq.Date(date.from,date.to,by="day")
x<-ldply(foreach(day=dates,combine=rbind) %do%{
#ldply 리스트를 데이터 프레임으로 변호
#%do%
# foreach: Specify the variables to iterate over
# %do%: Execute the R expression sequentially
# do는 순차적으로 실행
# dopar은 병렬적으로 실행
# %dopar%: Execute the R expression using the currently registered backend
#seq.Date
#?seq.Date
#Generate Regular Sequences of Date
#시작날짜와 종료날짜를 통해 date List 생성
read.csv(sprintf("%s/%s/%s/data.tsv",base.dir,app.name,day),
#sprintf
#?sprintf
#String Formatting Commands
#주어진 인자를 규칙에 맞게 문자열로 변환해 출력
#a="C:/Users/DS/Documents/R-/bussiness_prac/R"
#sprintf("%s/",a)
#"C:/Users/DS/Documents/R-/bussiness_prac/R/"
header = T,
sep="\t",
stringsAsFactors = F)
})
x
}
readdau<-function(app.name,data.from,date.to=date.from){
data<-readtsvdates("sample-data/section8/daily/dau/",app.name,date.from,date.to)
data
}
readdpu<-function(app.name,date.from,date.to=date.from){
data<-readtsvdates("sample-data/section8/daily/dpu/",app.name,date.from,date.to)
data
}
readactiondaily<-function(app.name,date.from,date.to = date.from){
data <-readtsvdates("sample-data/section8/daily/action/",app.name ,date.from,date.to)
data
}
dau<-readdau("game-01","2013-05-01","2013-10-31")
View(readactiondaily)
readtsvdates<-function(base.dir,app.name,date.from,date.to){
date.from<-as.Date(date.from)
date.to<-as.Date(date.to)
dates<-seq.Date(date.from,date.to,by="day")
x<-ldply(foreach(day=dates,combine=rbind) %do%{
#ldply 리스트를 데이터 프레임으로 변호
#%do%
# foreach: Specify the variables to iterate over
# %do%: Execute the R expression sequentially
# do는 순차적으로 실행
# dopar은 병렬적으로 실행
# %dopar%: Execute the R expression using the currently registered backend
#seq.Date
#?seq.Date
#Generate Regular Sequences of Date
#시작날짜와 종료날짜를 통해 date List 생성
read.csv(sprintf("%s/%s/%s/data.tsv",base.dir,app.name,day),
#sprintf
#?sprintf
#String Formatting Commands
#주어진 인자를 규칙에 맞게 문자열로 변환해 출력
#a="C:/Users/DS/Documents/R-/bussiness_prac/R"
#sprintf("%s/",a)
#"C:/Users/DS/Documents/R-/bussiness_prac/R/"
header = T,
sep="\t",
stringsAsFactors = F)
})
x
}
readdau<-function(app.name,data.from,date.to=date.from){
data<-readtsvdates("sample-data/section8/daily/dau/",app.name,date.from,date.to)
data
}
readdau<-function(app.name,date.from,date.to=date.from){
data<-readtsvdates("sample-data/section8/daily/dau/",app.name,date.from,date.to)
data
}
readdpu<-function(app.name,date.from,date.to=date.from){
data<-readtsvdates("sample-data/section8/daily/dpu/",app.name,date.from,date.to)
data
}
readactiondaily<-function(app.name,date.from,date.to = date.from){
data <-readtsvdates("sample-data/section8/daily/action/",app.name ,date.from,date.to)
data
}
dau<-readdau("game-01","2013-05-01","2013-10-31")
#foreach사용
#plyr 사용
library(plyr)
dau<-readdau("game-01","2013-05-01","2013-10-31")
head(dau)
dpu<-readdpu("game-01","2013-05-01","2013-10-31")
head(dpu)
user.action<-readactiondaily("game-01","2013-05-01","2013-10-31")
readactiondaily<-function(app.name,date.from,date.to = date.from){
data <-readtsvdates("sample-data/section8/daily/action/",app.name ,date.from,date.to)
data
}
user.action<-readactiondaily("game-01","2013-05-01","2013-10-31")
user.action<-readactiondaily("game-01","2013-10-31","2013-10-31")
dau2<-merge(dau,dpu[,c("log_date","user_id","payment"),],by=c("log_date","user_id"),all.x=T)
head(dau)
head(dpu)
dau2$is.payment<-ifelse(is.na(dau2$payment),0,1)
heaD(dau2)
head(dau2)
dau2$log_month<-substr(dau2$log_date,1,7)
head(dau2)
mau<-ddply(dau2,.(log_month,user_id),summarize,payment=sum(payment),access_days=length(log_date))
head(mau)
install.packages("ykmeans")
library(ykmeans)
mau$payment
head(dau2)
dau2$is.payment<-ifelse(is.na(dau2$payment),0,1)
head(dau2)
dau2<-merge(dau,dpu[,c("log_date","user_id","payment"),],by=c("log_date","user_id"),all.x=T)
dau2$is.payment<-ifelse(is.na(dau2$payment),0,1)
dau2$log_month<-substr(dau2$log_date,1,7)
head(dau2)
mau<-ddply(dau2,.(log_month,user_id),summarize,payment=sum(payment),access_days=length(log_date))
head(mau)
mau$payment
dau2<-merge(dau,dpu[,c("log_date","user_id","payment"),],by=c("log_date","user_id"),all.x=T)
dau2$is.payment<-ifelse(is.na(dau2$payment),0,1)
head(dau2)
head(dau)
head(dpu)
dau2<-merge(dau,dpu[,c("log_date","user_id","payment")],by=c("log_date","user_id"),all.x=T)
head(dau2)
head(dau2$payment)
dau2$payment
is.na(dau2$payment)
is.na(dau2$payment)==F
dau2[is.na(dau2$payment)==F,]
mau<-ddply(dau2,.(log_month,user_id),summarize,payment=sum(payment),access_days=length(log_date))
dau2$log_month<-substr(dau2$log_date,1,7)
head(dau2)
mau<-ddply(dau2,.(log_month,user_id),summarize,payment=sum(payment),access_days=length(log_date))
library(scales)
user.action2<-ykmeans(user.action,"A47","A47",3)
#?ykmeans
#A47이 랭킹이다.
a<-kmeans(user.action[,-c(1:3)],centers = 3)
user.action$cluster<-a$cluster
train.user.action<-scale(user.action[])
train.user.action<-scale(user.action)
train.user.action<-scale(user.action)
ggplot(arrange(user.action2,desc(A47)),
aes(x=1:length(user_id),y=A47,
#x 축은 그냥 숫자 명수
#y 축은 랭킹 포인트 크기순으로 정렬된 값
col=as.factor(cluster),
shape=as.factor(cluster)))+
geom_line()+
xlab("user")+
ylab("Ranking point")+
scale_y_continuous(labels = comma)+
ggtitle("Ranking Point")+
theme(legend.position = "none")
library("ggplot2")
ggplot(arrange(user.action2,desc(A47)),
aes(x=1:length(user_id),y=A47,
#x 축은 그냥 숫자 명수
#y 축은 랭킹 포인트 크기순으로 정렬된 값
col=as.factor(cluster),
shape=as.factor(cluster)))+
geom_line()+
xlab("user")+
ylab("Ranking point")+
scale_y_continuous(labels = comma)+
ggtitle("Ranking Point")+
theme(legend.position = "none")
#상위 랭킹 유저 픽
user.action.h<-user.action2[user.action2$cluster>=2,names(user.action)]
#전처리를 위해 기계학습 라이브러리 사용
install.packages("caret")
library(caret)
user.action.f<-user.action.h[,-c(1:4)]
row.names(user.action.f)<-user.action.h$user_id
#정보량이 0에 가까운 변수 제거
nzv<-nearZeroVar(user.action.f)
user.action.f.filtered<-user.action.f[,-nzv]
#변수 간에 상관이 높은 것을 제거
user.action.cor<-cor(user.action.f.filtered)
highly.cor.f<-findCorrelation(user.action.cor,cutoff = .7)
#findCorrelation
#제거해야하는 높은 상관 관계 변수 리스트 반환
user.action.f.filtered<-user.action.f.filtered[,-highly.cor.f]
#주성분 분석 실행
#pca
user.action.pca.base<-prcomp(user.action.f.filtered,scale=T)
user.action.pca<-data.frame(user.action.pca.base$x)
#유저별 주성분 변수 데이터 프레임 삽입
keys<-names(user.action.pca)
user.action.km<-ykmeans(user.action.pca,keys,"PC1",3:6)
ggplot(user.action.km,
aes(x=PC1,y=PC2,col=as.factor(cluster),shape=as.factor(cluster)))+
geom_point()
user.action.f.filtered$cluster<-user.action.km$cluster
user.action.f.center<-ldply(lapply(sort(unique(user.action.f.filtered$cluster)),
function(i){
x<-user.action.f.filtered[user.action.f.filtered$cluster==i,
-ncol(user.action.f.filtered)]
apply(x,2,function(d) mean(d))
}))
install.packages("fmsb")
library("fmsb")
radarchartframe<-function(df){
df<- data.frame(df)
dfmax<-apply(df,2,max)+1
dfmin<-apply(df,2,min)-1
as.data.frame(rbind(dfmax,dfmin,df))
}
#상관관계 높은 변수 제외
user.action.f.center
(ncol(user.action.f.center)-1)
ncol(user.action.f.center)
df<-user.action.f.center[,-(ncol(user.action.f.center)-1)]
df.cor<-cor(df)
df.highly.cor<-findCorrelation(df.cor,cutoff = 0.91)
df.filtered<-df[,-df.highly.cor]
df.filtered<-radarchartframe(scale(df.filtered))
names(df.filtered)
#상관관계 높은 변수 제외
user.action.f.center
df.cor<-cor(df)
df.highly.cor<-findCorrelation(df.cor,cutoff = 0.91)
df.filtered<-df[,-df.highly.cor]
df.filtered<-radarchartframe(scale(df.filtered))
names(df.filtered)
user.action.f.filtered
user.action.f.center
df.cor<-cor(df)
df.cor
df.highly.cor<-findCorrelation(df.cor,cutoff = 0.91)
df.filtered<-df[,-df.highly.cor]
df.filtered<-radarchartframe(scale(df.filtered))
names(df.filtered)
user.action.f.filtered$user_id<-as.numeric(row.names(user.action.f.filtered))
user.action.f.filtered
user.kpi<-merge(user.action.f.filtered,mau,by=
"user_id")
ddply(user.kpi,.(cluster),summarize,
arpu=round(mean(payment)),
access_days=round(mean(access_days)))
user.kpi
ddply(user.kpi,.(cluster),summarize,
arpu=round(mean(payment)),
access_days=round(mean(access_days)))
#chapter09
#결정트리분석
rm(ls())
#chapter09
#결정트리분석
rm(list=ls()
#chapter09
#결정트리분석
rm(list=ls())
#chapter09
#결정트리분석
rm(list=ls())
#chapter09
#결정트리분석
#게임접속 0~6일동안 접속일 비율이 설명변수
#그다음 7~13일의 접속 비율이 목적변수
library(plyr)
library(foreach)
readinstall<-function(app.name,target.day){
base.dir<-"sample-data/section9/snapshot/install"
f<-sprint("%s/%s/%s/install.csv",base.dir,app.name,target.day)
read.csv(f,header = T,stringsAsFactors = F)
}
read.csv(f,header = T,stringsAsFactors = F)
readdau<-function(app.name,date.from,date.to){
date.from<-as.Date(date.from)
date.to<-as.Date(data.to)
dates<-seq.Date(date.from,date.to,by="day")
ldply(foreach(day=dates,combine=rbind) %do% {
base.dir<-"sample-data/section9/daily/dau"
f<-sprintf("%s/%s/%s/dau.csv",base.dir,app.name,day)
read.csv(f,header = T,stringsAsFactors = F)
}
readdau<-function(app.name,date.from,date.to){
date.from<-as.Date(date.from)
date.to<-as.Date(data.to)
dates<-seq.Date(date.from,date.to,by="day")
ldply(foreach(day=dates,combine=rbind) %do% {
base.dir<-"sample-data/section9/daily/dau"
f<-sprintf("%s/%s/%s/dau.csv",base.dir,app.name,day)
read.csv(f,header = T,stringsAsFactors = F)
}
)
}
readdau<-function(app.name,date.from,date.to){
date.from<-as.Date(date.from)
date.to<-as.Date(data.to)
dates<-seq.Date(date.from,date.to,by="day")
ldply(foreach(day=dates,combine=rbind) %do% {
base.dir<-"sample-data/section9/daily/dau"
f<-sprintf("%s/%s/%s/dau.csv",base.dir,app.name,day)
read.csv(f,header = T,stringsAsFactors = F)
}
)
}
read.csv(f,header = T,stringsAsFactors = F)
readaction<-function(app.name,action.name,date.from,date.to){
date.from<-as.Date(date.from)
date.to<-as.Date(date.to)
dates<-seq.Date(date.from,date.to,by="day")
ldply(foreach(day=dates,combine=rbind) %do% {
base.dir<-"sample-data/section9/daily/action"
f<-sprintf("%s/%s/%s/%s/%s.csv",
base.dir,app.name,action.name,day,action.name)
read.csv(f,header = T,stringsAsFactors = F)
})
}
install<-readinstall("game-01","2013-09-30")
f<-sprintf("%s/%s/%s/install.csv",base.dir,app.name,target.day)
readinstall<-function(app.name,target.day){
base.dir<-"sample-data/section9/snapshot/install"
f<-sprintf("%s/%s/%s/install.csv",base.dir,app.name,target.day)
read.csv(f,header = T,stringsAsFactors = F)
}
install<-readinstall("game-01","2013-09-30")
dau<-readdau("game-01","2013-06-01","2013-09-30")
date.to<-as.Date(date.to)
ldply(foreach(day=dates,combine=rbind) %do% {
base.dir<-"sample-data/section9/daily/dau"
f<-sprintf("%s/%s/%s/dau.csv",base.dir,app.name,day)
read.csv(f,header = T,stringsAsFactors = F)
}
)
readdau<-function(app.name,date.from,date.to){
date.from<-as.Date(date.from)
date.to<-as.Date(date.to)
dates<-seq.Date(date.from,date.to,by="day")
ldply(foreach(day=dates,combine=rbind) %do% {
base.dir<-"sample-data/section9/daily/dau"
f<-sprintf("%s/%s/%s/dau.csv",base.dir,app.name,day)
read.csv(f,header = T,stringsAsFactors = F)
}
)
}
dau<-readdau("game-01","2013-06-01","2013-09-30")
battle<-readaction("game-01","battle","2013-06-01","2013-08-31")
head(battle)
msg<-readaction("game-01","message","2013-06-01","2013-08-31")
hlp<-readaction("game-01","help","2013-06-01","2013-08-31")
head(battle)
head(msg)
head(hlp)
dau.inst<-merge(dau,install,by="user_id",suffixes = C("",".inst"))
dau.inst<-merge(dau,install,by="user_id",suffixes = C("",".inst"))
head(install)
head(dau)
dau.inst<-merge(dau,install,by="user_id",suffixes = C("",".inst"))
dau.inst<-merge(dau,install,by="user_id",suffixes = c("",".inst"))
head(dau.inst)
dau.inst$log_date<-as.Date(dau.inst$log_date)
dau.inst$elapsed_days<-as.numeric(dau.inst$log_date-dau.inst$log_date.inst)
dau.inst$log_date<-as.Date(dau.inst$log_date)
dau.inst$log_date.inst<-as.Date(dau.inst$log_date.inst)
dau.inst$elapsed_days<-as.numeric(dau.inst$log_date-dau.inst$log_date.inst)
dau.inst.7_13<-
dau.inst[dau.inst$elapsed_days>=7 & dau.inst$elapsed_days<=13,]
head(dau.inst.7_13)
dau.inst.7_13.login.ds<-ddply(dau.inst.7_13,.(user_id),summarize,
density=length(log_date)/7)
head(dau.inst.7_13.login.ds)
unique(dau.inst.7_13.login.ds$density)
dau.inst.7_13.login.ds
target.install<-install[install$log_date>="2013-06-01" & install$log_date
<="2013-08-25",]
target.install.login.ds<-
merge(target.install,dau.inst.7_13.login.ds,
by="user_id",all.x=T)
target.install.login.ds$density<-
ifelse(is.na(target.install.login.ds$density),0,
target.install.login.ds$density)
head(target.install.login.ds)
battle.inst<-merge(battle,install,by="user_id"
,suffixes = c("",".inst"))
head(battle.inst)
battle.inst$log_date<-as.Date(battle.inst$log_date)
battle.inst$log_date.inst<-as.Date(battle.inst$log_date.inst)
battle.inst$elapsed_days<-as.numeric(battle.inst$log_date-battle.inst$log_date.inst)
battle.inst2<-battle.inst[battle.inst$elapsed_days>=0 & battle.inst$elapsed_days <=6,]
library(reshape2)
battle.inst2$elapsed_days<-paste0("d",battle.inst2$elapsed_days)
battle.inst2.cast<-dcast(battle.inst2,user_id~elapsed_days,value.var = "count",sum)
head(battle.inst2.cast)
